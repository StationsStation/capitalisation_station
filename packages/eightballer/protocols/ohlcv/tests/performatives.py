# Auto-generated by tool

"""Models for the ohlcv protocol performatives to facilitate hypothesis strategy generation."""

from pydantic import BaseModel, conint, confloat

from packages.eightballer.protocols.ohlcv.custom_types import (
    ErrorCode,
)
from packages.eightballer.protocols.ohlcv.tests.primitive_strategies import (
    Int32,
    Double,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class Subscribe(BaseModel):
    """Model for the `SUBSCRIBE` initial speech act performative."""

    exchange_id: str
    market_name: str
    interval: conint(ge=Int32.min(), le=Int32.max())


class Candlestick(BaseModel):
    """Model for the `CANDLESTICK` initial speech act performative."""

    exchange_id: str
    market_name: str
    interval: conint(ge=Int32.min(), le=Int32.max())
    open: confloat(ge=Double.min(), le=Double.max())
    high: confloat(ge=Double.min(), le=Double.max())
    low: confloat(ge=Double.min(), le=Double.max())
    close: confloat(ge=Double.min(), le=Double.max())
    volume: confloat(ge=Double.min(), le=Double.max())
    timestamp: conint(ge=Int32.min(), le=Int32.max())


class History(BaseModel):
    """Model for the `HISTORY` initial speech act performative."""

    exchange_id: str
    market_name: str
    start_timestamp: conint(ge=Int32.min(), le=Int32.max())
    end_timestamp: conint(ge=Int32.min(), le=Int32.max())
    interval: conint(ge=Int32.min(), le=Int32.max())


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    error_code: ErrorCode
    error_msg: str
    error_data: dict[str, bytes]


class End(BaseModel):
    """Model for the `END` initial speech act performative."""


Subscribe.model_rebuild()
Candlestick.model_rebuild()
History.model_rebuild()
Error.model_rebuild()
End.model_rebuild()
