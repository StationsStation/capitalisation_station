# Auto-generated by tool

"""Models for the positions protocol performatives to facilitate hypothesis strategy generation."""

from typing import Optional

from pydantic import BaseModel

from packages.eightballer.protocols.positions.custom_types import (
    Position,
    ErrorCode,
    Positions,
    PositionSide,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class GetAllPositions(BaseModel):
    """Model for the `GET_ALL_POSITIONS` initial speech act performative."""

    exchange_id: str
    params: Optional[dict[str, bytes]]
    side: Optional[PositionSide]


class GetPosition(BaseModel):
    """Model for the `GET_POSITION` initial speech act performative."""

    position_id: str
    exchange_id: str


class AllPositions(BaseModel):
    """Model for the `ALL_POSITIONS` initial speech act performative."""

    positions: Positions
    exchange_id: str


class Position(BaseModel):
    """Model for the `POSITION` initial speech act performative."""

    position: Position
    exchange_id: str


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    error_code: ErrorCode
    error_msg: str
    error_data: dict[str, bytes]


GetAllPositions.model_rebuild()
GetPosition.model_rebuild()
AllPositions.model_rebuild()
Position.model_rebuild()
Error.model_rebuild()
