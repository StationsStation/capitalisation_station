# Auto-generated by tool

"""Models for the balances protocol performatives to facilitate hypothesis strategy generation."""

from typing import Optional

from pydantic import BaseModel

from packages.eightballer.protocols.balances.custom_types import (
    Balance,
    Balances,
    ErrorCode,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class GetAllBalances(BaseModel):
    """Model for the `GET_ALL_BALANCES` initial speech act performative."""

    params: Optional[dict[str, bytes]]
    exchange_id: Optional[str]
    ledger_id: Optional[str]
    address: Optional[str]


class GetBalance(BaseModel):
    """Model for the `GET_BALANCE` initial speech act performative."""

    asset_id: str
    exchange_id: Optional[str]
    ledger_id: Optional[str]
    address: Optional[str]


class AllBalances(BaseModel):
    """Model for the `ALL_BALANCES` initial speech act performative."""

    balances: Balances
    ledger_id: Optional[str]
    exchange_id: Optional[str]


class Balance(BaseModel):
    """Model for the `BALANCE` initial speech act performative."""

    balance: Balance


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    error_code: ErrorCode
    error_msg: str
    error_data: dict[str, bytes]


GetAllBalances.model_rebuild()
GetBalance.model_rebuild()
AllBalances.model_rebuild()
Balance.model_rebuild()
Error.model_rebuild()
