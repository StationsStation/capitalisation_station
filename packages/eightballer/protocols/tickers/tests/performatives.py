# Auto-generated by tool

"""Models for the tickers protocol performatives to facilitate hypothesis strategy generation."""

from typing import Optional

from pydantic import BaseModel

from packages.eightballer.protocols.tickers.custom_types import (
    Ticker,
    Tickers,
    ErrorCode,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class GetAllTickers(BaseModel):
    """Model for the `GET_ALL_TICKERS` initial speech act performative."""

    ledger_id: Optional[str]
    exchange_id: Optional[str]
    params: Optional[bytes]


class GetTicker(BaseModel):
    """Model for the `GET_TICKER` initial speech act performative."""

    symbol: Optional[str]
    asset_a: Optional[str]
    asset_b: Optional[str]
    exchange_id: Optional[str]
    ledger_id: Optional[str]
    params: Optional[bytes]


class AllTickers(BaseModel):
    """Model for the `ALL_TICKERS` initial speech act performative."""

    tickers: Tickers
    exchange_id: Optional[str]
    ledger_id: Optional[str]


class Ticker(BaseModel):
    """Model for the `TICKER` initial speech act performative."""

    ticker: Ticker
    exchange_id: Optional[str]
    ledger_id: Optional[str]


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    error_code: ErrorCode
    error_msg: str
    error_data: dict[str, bytes]


GetAllTickers.model_rebuild()
GetTicker.model_rebuild()
AllTickers.model_rebuild()
Ticker.model_rebuild()
Error.model_rebuild()
