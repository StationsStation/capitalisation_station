# Auto-generated by tool

"""Models for the orders protocol performatives to facilitate hypothesis strategy generation."""

from typing import Optional

from pydantic import BaseModel, confloat

from packages.eightballer.protocols.orders.custom_types import (
    Order,
    Orders,
    ErrorCode,
    OrderSide,
    OrderType,
    OrderStatus,
)
from packages.eightballer.protocols.orders.tests.primitive_strategies import (
    Double,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class CreateOrder(BaseModel):
    """Model for the `CREATE_ORDER` initial speech act performative."""

    order: Order
    exchange_id: Optional[str]
    ledger_id: Optional[str]


class OrderCreated(BaseModel):
    """Model for the `ORDER_CREATED` initial speech act performative."""

    order: Order


class CancelOrder(BaseModel):
    """Model for the `CANCEL_ORDER` initial speech act performative."""

    order: Order
    exchange_id: Optional[str]
    ledger_id: Optional[str]


class OrderCancelled(BaseModel):
    """Model for the `ORDER_CANCELLED` initial speech act performative."""

    order: Order


class GetOrders(BaseModel):
    """Model for the `GET_ORDERS` initial speech act performative."""

    symbol: Optional[str]
    currency: Optional[str]
    order_type: Optional[OrderType]
    side: Optional[OrderSide]
    status: Optional[OrderStatus]
    exchange_id: Optional[str]
    ledger_id: Optional[str]
    account: Optional[str]


class GetSettlements(BaseModel):
    """Model for the `GET_SETTLEMENTS` initial speech act performative."""

    currency: Optional[str]
    end_timestamp: Optional[confloat(ge=Double.min(), le=Double.max())]
    start_timestamp: Optional[confloat(ge=Double.min(), le=Double.max())]
    ledger_id: Optional[str]
    exchange_id: Optional[str]


class GetOrder(BaseModel):
    """Model for the `GET_ORDER` initial speech act performative."""

    order: Order
    exchange_id: Optional[str]
    ledger_id: Optional[str]


class Order(BaseModel):
    """Model for the `ORDER` initial speech act performative."""

    order: Order


class Orders(BaseModel):
    """Model for the `ORDERS` initial speech act performative."""

    orders: Orders


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    error_code: ErrorCode
    error_msg: str
    error_data: dict[str, bytes]


CreateOrder.model_rebuild()
OrderCreated.model_rebuild()
CancelOrder.model_rebuild()
OrderCancelled.model_rebuild()
GetOrders.model_rebuild()
GetSettlements.model_rebuild()
GetOrder.model_rebuild()
Order.model_rebuild()
Orders.model_rebuild()
Error.model_rebuild()
