# Auto-generated by tool

"""Test dialogues module for the order_book protocol."""

from unittest.mock import MagicMock

from pydantic import BaseModel
from hypothesis import HealthCheck, given, settings, strategies as st
from aea.configurations.data_types import PublicId

from packages.eightballer.protocols.order_book.message import OrderBookMessage
from packages.eightballer.protocols.order_book.dialogues import (
    OrderBookDialogues,
)
from packages.eightballer.protocols.order_book.tests.performatives import (
    Subscribe,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def validate_dialogue(performative, model):
    """Validate successful dialogue instantiation."""

    skill_context = MagicMock()
    skill_context.skill_id = PublicId(
        name="mock_name",
        author="mock_author",
    )

    dialogues = OrderBookDialogues(
        name="test_order_book_dialogues",
        skill_context=skill_context,
    )

    dialogue = dialogues.create(
        counterparty="dummy_counterparty",
        performative=performative,
        **shallow_dump(model),
    )

    assert dialogue is not None


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(Subscribe))
def test_subscribe_dialogues(model):
    """Test for the 'SUBSCRIBE' protocol."""
    validate_dialogue(OrderBookMessage.Performative.SUBSCRIBE, model)
