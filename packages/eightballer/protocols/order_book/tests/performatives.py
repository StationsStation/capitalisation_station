# Auto-generated by tool

"""Models for the order_book protocol performatives to facilitate hypothesis strategy generation."""

from typing import Optional

from pydantic import BaseModel, conint

from packages.eightballer.protocols.order_book.custom_types import (
    OrderBook,
)
from packages.eightballer.protocols.order_book.tests.primitive_strategies import (
    Int32,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class Subscribe(BaseModel):
    """Model for the `SUBSCRIBE` initial speech act performative."""

    exchange_id: str
    symbol: str
    precision: Optional[str]
    interval: Optional[conint(ge=Int32.min(), le=Int32.max())]


class Unsubscribe(BaseModel):
    """Model for the `UNSUBSCRIBE` initial speech act performative."""

    exchange_id: str
    symbol: str


class OrderBookUpdate(BaseModel):
    """Model for the `ORDER_BOOK_UPDATE` initial speech act performative."""

    order_book: OrderBook


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    error_msg: str


Subscribe.model_rebuild()
Unsubscribe.model_rebuild()
OrderBookUpdate.model_rebuild()
Error.model_rebuild()
