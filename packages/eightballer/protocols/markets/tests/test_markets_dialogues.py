# Auto-generated by tool

"""Test dialogues module for the markets protocol."""

from unittest.mock import MagicMock

from pydantic import BaseModel
from hypothesis import HealthCheck, given, settings, strategies as st
from aea.configurations.data_types import PublicId

from packages.eightballer.protocols.markets.message import MarketsMessage
from packages.eightballer.protocols.markets.dialogues import (
    MarketsDialogues,
)
from packages.eightballer.protocols.markets.tests.performatives import (
    GetAllMarkets,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def validate_dialogue(performative, model):
    """Validate successful dialogue instantiation."""

    skill_context = MagicMock()
    skill_context.skill_id = PublicId(
        name="mock_name",
        author="mock_author",
    )

    dialogues = MarketsDialogues(
        name="test_markets_dialogues",
        skill_context=skill_context,
    )

    dialogue = dialogues.create(
        counterparty="dummy_counterparty",
        performative=performative,
        **shallow_dump(model),
    )

    assert dialogue is not None


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(GetAllMarkets))
def test_get_all_markets_dialogues(model):
    """Test for the 'GET_ALL_MARKETS' protocol."""
    validate_dialogue(MarketsMessage.Performative.GET_ALL_MARKETS, model)
