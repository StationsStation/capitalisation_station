# Auto-generated by tool

"""Test dialogues module for the default protocol."""

from unittest.mock import MagicMock

from pydantic import BaseModel
from hypothesis import HealthCheck, given, settings, strategies as st
from aea.configurations.data_types import PublicId

from packages.eightballer.protocols.default.message import DefaultMessage
from packages.eightballer.protocols.default.dialogues import (
    DefaultDialogues,
)
from packages.eightballer.protocols.default.tests.performatives import (
    Bytes,
    Error,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def validate_dialogue(performative, model):
    """Validate successful dialogue instantiation."""

    skill_context = MagicMock()
    skill_context.skill_id = PublicId(
        name="mock_name",
        author="mock_author",
    )

    dialogues = DefaultDialogues(
        name="test_default_dialogues",
        skill_context=skill_context,
    )

    dialogue = dialogues.create(
        counterparty="dummy_counterparty",
        performative=performative,
        **shallow_dump(model),
    )

    assert dialogue is not None


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(Bytes))
def test_bytes_dialogues(model):
    """Test for the 'BYTES' protocol."""
    validate_dialogue(DefaultMessage.Performative.BYTES, model)


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(Error))
def test_error_dialogues(model):
    """Test for the 'ERROR' protocol."""
    validate_dialogue(DefaultMessage.Performative.ERROR, model)
