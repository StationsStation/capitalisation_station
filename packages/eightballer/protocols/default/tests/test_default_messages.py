# Auto-generated by tool

"""Test messages module for the default protocol."""

from pydantic import BaseModel
from hypothesis import HealthCheck, given, settings, strategies as st
from aea.mail.base import Envelope

from packages.eightballer.protocols.default.message import DefaultMessage
from packages.eightballer.protocols.default.tests.performatives import (
    End,
    Bytes,
    Error,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def perform_message_test(performative, model) -> None:
    """Test message encode/decode."""

    msg = DefaultMessage(
        performative=performative,
        **shallow_dump(model),
    )

    msg.to = "receiver"
    assert msg._is_consistent()  # noqa: SLF001
    envelope = Envelope(to=msg.to, sender="sender", message=msg)
    envelope_bytes = envelope.encode()

    actual_envelope = Envelope.decode(envelope_bytes)
    expected_envelope = envelope

    assert expected_envelope.to == actual_envelope.to
    assert expected_envelope.sender == actual_envelope.sender
    assert expected_envelope.protocol_specification_id == actual_envelope.protocol_specification_id
    assert expected_envelope.message != actual_envelope.message

    actual_msg = DefaultMessage.serializer.decode(actual_envelope.message_bytes)
    actual_msg.to = actual_envelope.to
    actual_msg.sender = actual_envelope.sender
    expected_msg = msg
    assert expected_msg == actual_msg


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(Bytes))
def test_bytes_messages(model):
    """Test for the 'BYTES' protocol message encode and decode."""

    perform_message_test(DefaultMessage.Performative.BYTES, model)


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(Error))
def test_error_messages(model):
    """Test for the 'ERROR' protocol message encode and decode."""

    perform_message_test(DefaultMessage.Performative.ERROR, model)


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(End))
def test_end_messages(model):
    """Test for the 'END' protocol message encode and decode."""

    perform_message_test(DefaultMessage.Performative.END, model)
