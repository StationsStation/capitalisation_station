# Auto-generated by tool

"""Test dialogues module for the liquidity_provision protocol."""

from unittest.mock import MagicMock

from pydantic import BaseModel
from hypothesis import HealthCheck, given, settings, strategies as st
from aea.configurations.data_types import PublicId

from packages.eightballer.protocols.liquidity_provision.message import LiquidityProvisionMessage
from packages.eightballer.protocols.liquidity_provision.dialogues import (
    LiquidityProvisionDialogues,
)
from packages.eightballer.protocols.liquidity_provision.tests.performatives import (
    AddLiquidity,
    QueryLiquidity,
    RemoveLiquidity,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def validate_dialogue(performative, model):
    """Validate successful dialogue instantiation."""

    skill_context = MagicMock()
    skill_context.skill_id = PublicId(
        name="mock_name",
        author="mock_author",
    )

    dialogues = LiquidityProvisionDialogues(
        name="test_liquidity_provision_dialogues",
        skill_context=skill_context,
    )

    dialogue = dialogues.create(
        counterparty="dummy_counterparty",
        performative=performative,
        **shallow_dump(model),
    )

    assert dialogue is not None


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(AddLiquidity))
def test_add_liquidity_dialogues(model):
    """Test for the 'ADD_LIQUIDITY' protocol."""
    validate_dialogue(LiquidityProvisionMessage.Performative.ADD_LIQUIDITY, model)


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(RemoveLiquidity))
def test_remove_liquidity_dialogues(model):
    """Test for the 'REMOVE_LIQUIDITY' protocol."""
    validate_dialogue(LiquidityProvisionMessage.Performative.REMOVE_LIQUIDITY, model)


@settings(deadline=1000, suppress_health_check=[HealthCheck.too_slow])
@given(st.from_type(QueryLiquidity))
def test_query_liquidity_dialogues(model):
    """Test for the 'QUERY_LIQUIDITY' protocol."""
    validate_dialogue(LiquidityProvisionMessage.Performative.QUERY_LIQUIDITY, model)
