# ------------------------------------------------------------------------------
#
#   Copyright 2023
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from abc import ABC
from enum import Enum
from typing import Any

from aea.skills.behaviours import State, FSMBehaviour


class FundingrateabciappEvents(Enum):
    """Events for the fsm."""

    SHOULD_LONG_EXCHANGE_B_AND_SHORT_A = "SHOULD_LONG_EXCHANGE_B_AND_SHORT_A"
    DO_NOTHING = "DO_NOTHING"
    SHOULD_UNWIND = "SHOULD_UNWIND"
    SHOULD_LONG_EXCHANGE_A_AND_SHORT_B = "SHOULD_LONG_EXCHANGE_A_AND_SHORT_B"
    DONE = "DONE"
    BRIDGE_NEEDED = "BRIDGE_NEEDED"


class FundingrateabciappStates(Enum):
    """States for the fsm."""

    GETDATAROUND = "getdataround"
    DONOTHINGROUND = "donothinground"
    UNWINDPOSITIONSROUND = "unwindpositionsround"
    CHECKSTRATEGYROUND = "checkstrategyround"
    ENTERSHORTLONGROUND = "entershortlonground"
    ENTERLONGSHORTROUND = "enterlongshortround"
    BRIDGEROUND = "bridgeround"


class BaseState(State, ABC):
    """Base class for states."""

    _state: FundingrateabciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False  # Initially, the state is not done

    def is_done(self) -> bool:
        """Is done."""
        return self._is_done

    @property
    def event(self) -> str | None:
        """Current event."""
        return self._event


# Define states


class GetDataRound(BaseState):
    """This class implements the behaviour of the state GetDataRound."""

    _state = FundingrateabciappStates.GETDATAROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.DONE


class DoNothingRound(BaseState):
    """This class implements the behaviour of the state DoNothingRound."""

    _state = FundingrateabciappStates.DONOTHINGROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.DONE


class UnwindPositionsRound(BaseState):
    """This class implements the behaviour of the state UnwindPositionsRound."""

    _state = FundingrateabciappStates.UNWINDPOSITIONSROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.DONE


class CheckStrategyRound(BaseState):
    """This class implements the behaviour of the state CheckStrategyRound."""

    _state = FundingrateabciappStates.CHECKSTRATEGYROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.SHOULD_LONG_EXCHANGE_A_AND_SHORT_B


class EnterShortLongRound(BaseState):
    """This class implements the behaviour of the state EnterShortLongRound."""

    _state = FundingrateabciappStates.ENTERSHORTLONGROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.DONE


class EnterLongShortRound(BaseState):
    """This class implements the behaviour of the state EnterLongShortRound."""

    _state = FundingrateabciappStates.ENTERLONGSHORTROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.DONE


class BridgeRound(BaseState):
    """This class implements the behaviour of the state BridgeRound."""

    _state = FundingrateabciappStates.BRIDGEROUND

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = FundingrateabciappEvents.DONE


class FundingrateabciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    rounds = [
        GetDataRound,
        DoNothingRound,
        UnwindPositionsRound,
        CheckStrategyRound,
        EnterShortLongRound,
        EnterLongShortRound,
        BridgeRound,
    ]

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(FundingrateabciappStates.CHECKSTRATEGYROUND.value, CheckStrategyRound(**kwargs), True)

        self.register_state(FundingrateabciappStates.GETDATAROUND.value, GetDataRound(**kwargs))
        self.register_state(FundingrateabciappStates.DONOTHINGROUND.value, DoNothingRound(**kwargs))
        self.register_state(FundingrateabciappStates.UNWINDPOSITIONSROUND.value, UnwindPositionsRound(**kwargs))
        self.register_state(FundingrateabciappStates.ENTERSHORTLONGROUND.value, EnterShortLongRound(**kwargs))
        self.register_state(FundingrateabciappStates.ENTERLONGSHORTROUND.value, EnterLongShortRound(**kwargs))
        self.register_state(FundingrateabciappStates.BRIDGEROUND.value, BridgeRound(**kwargs))

        self.register_transition(
            source=FundingrateabciappStates.BRIDGEROUND.value,
            event=FundingrateabciappEvents.DONE,
            destination=FundingrateabciappStates.DONOTHINGROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.CHECKSTRATEGYROUND.value,
            event=FundingrateabciappEvents.BRIDGE_NEEDED,
            destination=FundingrateabciappStates.BRIDGEROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.CHECKSTRATEGYROUND.value,
            event=FundingrateabciappEvents.DO_NOTHING,
            destination=FundingrateabciappStates.DONOTHINGROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.CHECKSTRATEGYROUND.value,
            event=FundingrateabciappEvents.SHOULD_LONG_EXCHANGE_A_AND_SHORT_B,
            destination=FundingrateabciappStates.ENTERSHORTLONGROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.CHECKSTRATEGYROUND.value,
            event=FundingrateabciappEvents.SHOULD_LONG_EXCHANGE_B_AND_SHORT_A,
            destination=FundingrateabciappStates.ENTERLONGSHORTROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.CHECKSTRATEGYROUND.value,
            event=FundingrateabciappEvents.SHOULD_UNWIND,
            destination=FundingrateabciappStates.UNWINDPOSITIONSROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.DONOTHINGROUND.value,
            event=FundingrateabciappEvents.DONE,
            destination=FundingrateabciappStates.GETDATAROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.ENTERLONGSHORTROUND.value,
            event=FundingrateabciappEvents.DONE,
            destination=FundingrateabciappStates.DONOTHINGROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.ENTERSHORTLONGROUND.value,
            event=FundingrateabciappEvents.DONE,
            destination=FundingrateabciappStates.DONOTHINGROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.GETDATAROUND.value,
            event=FundingrateabciappEvents.DONE,
            destination=FundingrateabciappStates.CHECKSTRATEGYROUND.value,
        )
        self.register_transition(
            source=FundingrateabciappStates.UNWINDPOSITIONSROUND.value,
            event=FundingrateabciappEvents.DONE,
            destination=FundingrateabciappStates.DONOTHINGROUND.value,
        )

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Fundingrateabciapp FSM behaviour.")

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Fundingrateabciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        os._exit(0)
