# Auto-generated by tool

"""Models for the asset_bridging protocol performatives to facilitate hypothesis strategy generation."""

from pydantic import BaseModel

from packages.zarathustra.protocols.asset_bridging.custom_types import (
    ErrorInfo,
    BridgeResult,
    BridgeRequest,
)


# ruff: noqa: UP007
# UP007    - Use X | Y for type annotations  # NOTE: important edge case pydantic-hypothesis interaction!


class RequestBridge(BaseModel):
    """Model for the `REQUEST_BRIDGE` initial speech act performative."""

    request: BridgeRequest


class BridgeStatus(BaseModel):
    """Model for the `BRIDGE_STATUS` initial speech act performative."""

    result: BridgeResult


class RequestStatus(BaseModel):
    """Model for the `REQUEST_STATUS` initial speech act performative."""

    result: BridgeResult


class Error(BaseModel):
    """Model for the `ERROR` initial speech act performative."""

    info: ErrorInfo


RequestBridge.model_rebuild()
BridgeStatus.model_rebuild()
RequestStatus.model_rebuild()
Error.model_rebuild()
