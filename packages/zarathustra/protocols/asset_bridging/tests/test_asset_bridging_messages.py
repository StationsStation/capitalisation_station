# Auto-generated by tool

"""Test messages module for the asset_bridging protocol."""

from pydantic import BaseModel
from hypothesis import given, strategies as st
from aea.mail.base import Envelope

from packages.zarathustra.protocols.asset_bridging.message import AssetBridgingMessage
from packages.zarathustra.protocols.asset_bridging.tests.performatives import (
    Error,
    BridgeStatus,
    RequestBridge,
    RequestStatus,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def perform_message_test(performative, model) -> None:
    """Test message encode/decode."""

    msg = AssetBridgingMessage(
        performative=performative,
        **shallow_dump(model),
    )

    msg.to = "receiver"
    assert msg._is_consistent()  # noqa: SLF001
    envelope = Envelope(to=msg.to, sender="sender", message=msg)
    envelope_bytes = envelope.encode()

    actual_envelope = Envelope.decode(envelope_bytes)
    expected_envelope = envelope

    assert expected_envelope.to == actual_envelope.to
    assert expected_envelope.sender == actual_envelope.sender
    assert expected_envelope.protocol_specification_id == actual_envelope.protocol_specification_id
    assert expected_envelope.message != actual_envelope.message

    actual_msg = AssetBridgingMessage.serializer.decode(actual_envelope.message_bytes)
    actual_msg.to = actual_envelope.to
    actual_msg.sender = actual_envelope.sender
    expected_msg = msg
    assert expected_msg == actual_msg


@given(st.from_type(RequestBridge))
def test_request_bridge_messages(model):
    """Test for the 'REQUEST_BRIDGE' protocol message encode and decode."""

    perform_message_test(AssetBridgingMessage.Performative.REQUEST_BRIDGE, model)


@given(st.from_type(BridgeStatus))
def test_bridge_status_messages(model):
    """Test for the 'BRIDGE_STATUS' protocol message encode and decode."""

    perform_message_test(AssetBridgingMessage.Performative.BRIDGE_STATUS, model)


@given(st.from_type(RequestStatus))
def test_request_status_messages(model):
    """Test for the 'REQUEST_STATUS' protocol message encode and decode."""

    perform_message_test(AssetBridgingMessage.Performative.REQUEST_STATUS, model)


@given(st.from_type(Error))
def test_error_messages(model):
    """Test for the 'ERROR' protocol message encode and decode."""

    perform_message_test(AssetBridgingMessage.Performative.ERROR, model)
