# Auto-generated by tool

"""Test dialogues module for the asset_bridging protocol."""

from unittest.mock import MagicMock

from pydantic import BaseModel
from hypothesis import given, strategies as st
from aea.configurations.data_types import PublicId
from packages.zarathustra.protocols.asset_bridging.message import AssetBridgingMessage
from packages.zarathustra.protocols.asset_bridging.dialogues import (
    AssetBridgingDialogues,
)
from packages.zarathustra.protocols.asset_bridging.tests.performatives import (
    RequestBridge,
    RequestStatus,
)


def shallow_dump(model: BaseModel) -> dict:
    """Shallow dump pydantic model."""

    return {name: getattr(model, name) for name in model.__class__.model_fields}


def validate_dialogue(performative, model):
    """Validate successful dialogue instantiation."""

    skill_context = MagicMock()
    skill_context.skill_id = PublicId(
        name="mock_name",
        author="mock_author",
    )

    dialogues = AssetBridgingDialogues(
        name="test_asset_bridging_dialogues",
        skill_context=skill_context,
    )

    dialogue = dialogues.create(
        counterparty="dummy_counterparty",
        performative=performative,
        **shallow_dump(model),
    )

    assert dialogue is not None


@given(st.from_type(RequestBridge))
def test_request_bridge_dialogues(model):
    """Test for the 'REQUEST_BRIDGE' protocol."""
    validate_dialogue(AssetBridgingMessage.Performative.REQUEST_BRIDGE, model)


@given(st.from_type(RequestStatus))
def test_request_status_dialogues(model):
    """Test for the 'REQUEST_STATUS' protocol."""
    validate_dialogue(AssetBridgingMessage.Performative.REQUEST_STATUS, model)
